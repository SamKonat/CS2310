{"version":3,"sources":["Home.js","Login.js","Patients.js","EmergencyDetails.js","App.js","serviceWorker.js","index.js"],"names":["Home","Component","state","tableEntries","emergencyCondition","fetch","then","res","json","result","entries","i","length","current","detailsPath","emergencyId","rowClass","status","entry","className","scope","to","patientName","time","push","setState","this","Patients","EmergencyDetails","App","id","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"qWAkGeA,G,MC3FKC,Y,wDDEhB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDA,MAAQ,CACTC,aAAc,GACdC,mBAAoB,IALT,E,iEASG,IAAD,OACXD,EAAe,GAErBE,MAAM,qDACDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACG,SAACG,GAGG,IAFA,IAAIC,EAAUD,EACVL,EAAqB,UAChBO,EAAI,EAAGA,EAAID,EAAQE,OAAQD,IAAK,CACrC,IAAIE,EAAUH,EAAQC,GAClBG,EAAc,qBAAuBD,EAAQE,YAC7CC,EAAW,eACO,YAAlBH,EAAQI,SACRD,EAAW,iBAGO,YAAlBH,EAAQI,SACc,aAAlBJ,EAAQI,OACRb,EAAqBS,EAAQI,OACA,aAAtBb,IACPA,EAAqB,aAI7B,IAAIc,EAAQ,wBAAIC,UAAWH,GACvB,wBAAII,MAAM,OAAOT,EAAI,GACrB,4BACI,kBAAC,IAAD,CAAMU,GAAIP,GACLD,EAAQS,cAGjB,4BAAKT,EAAQU,MACb,4BAAKV,EAAQI,SAGjBd,EAAaqB,KAAKN,GAGtB,EAAKO,SACD,CACI,aAAgBtB,EAChB,mBAAsBC,S,+BAQ1C,OACI,6BACI,yBAAKe,UAAU,OACX,yBAAKA,UAAU,aACX,4DAEJ,yBAAKA,UAAU,YACX,wBAAIA,UAAU,eAAd,eAMR,2BAAOA,UAAU,cACb,+BACI,4BACI,wBAAIC,MAAM,OAAV,KACA,wBAAIA,MAAM,OAAV,gBACA,wBAAIA,MAAM,OAAV,qBACA,wBAAIA,MAAM,OAAV,YAGR,+BACKM,KAAKxB,MAAMC,oB,GApFjBF,cEWJ0B,E,kDATX,WAAYzB,GAAQ,uCACVA,G,qDAIN,OAAQ,6C,GAPOD,aCYR2B,G,wDAbX,WAAY1B,GAAQ,uCACVA,G,qDAIN,OACI,6BACI,4C,GATeD,c,MCiDhB4B,MAtCf,WACE,OACE,kBAAC,IAAD,KAEE,yBAAKV,UAAU,6DACb,kBAAC,IAAD,CAAMA,UAAU,wBAAwBE,GAAG,KAA3C,eAEA,yBAAKF,UAAU,2BAA2BW,GAAG,0BAC3C,wBAAIX,UAAU,sBACZ,wBAAIA,UAAU,YACZ,kBAAC,IAAD,CAAMA,UAAU,WAAWE,GAAG,KAA9B,QAAuC,0BAAMF,UAAU,WAAhB,eAEzC,wBAAIA,UAAU,YACZ,kBAAC,IAAD,CAAMA,UAAU,WAAWE,GAAG,KAA9B,YAA2C,0BAAMF,UAAU,WAAhB,kBAMnD,yBAAKA,UAAU,aAGb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOY,KAAK,aACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,yBACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,WCjCQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtC,MAAK,SAAAuC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.07eeef80.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n    Link\r\n} from \"react-router-dom\";\r\n\r\nimport './Home.css';\r\n\r\nclass Home extends Component {\r\n\r\n    constructor(state) {\r\n        super(state);\r\n\r\n        this.state = {\r\n            tableEntries: [],\r\n            emergencyCondition: \"\",\r\n        }\r\n    }\r\n\r\n    componentWillMount() {\r\n        const tableEntries = [];\r\n\r\n        fetch('http://localhost:8080/api/emergency/notifications')\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    var entries = result;\r\n                    var emergencyCondition = \"healthy\";\r\n                    for (var i = 0; i < entries.length; i++) {\r\n                        var current = entries[i];\r\n                        var detailsPath = \"/emergencyDetails/\" + current.emergencyId;\r\n                        var rowClass = \"table-danger\";\r\n                        if (current.status == \"received\") {\r\n                            rowClass = \"table-warning\";\r\n                        }\r\n\r\n                        if (current.status != \"resolved\") {\r\n                            if (current.status == 'emergency') {\r\n                                emergencyCondition = current.status;\r\n                            } else if (emergencyCondition != 'emergency') {\r\n                                emergencyCondition = \"treating\";\r\n                            }\r\n                        }\r\n\r\n                        var entry = <tr className={rowClass}>\r\n                            <th scope=\"row\">{i + 1}</th>\r\n                            <td>\r\n                                <Link to={detailsPath}>\r\n                                    {current.patientName}\r\n                                </Link>\r\n                                </td>\r\n                            <td>{current.time}</td>\r\n                            <td>{current.status}</td>\r\n                        </tr>;\r\n\r\n                        tableEntries.push(entry);\r\n                    }\r\n\r\n                    this.setState(\r\n                        {\r\n                            \"tableEntries\": tableEntries, \r\n                            \"emergencyCondition\": emergencyCondition\r\n                        }\r\n                    );\r\n                }\r\n            )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm-10\">\r\n                        <h3>Emergency Notification Home</h3>\r\n                    </div>\r\n                    <div className=\"col-sm-2\">\r\n                        <h3 className=\"text-danger\">\r\n                            Emergency\r\n                    </h3>\r\n                    </div>\r\n                </div>\r\n\r\n                <table className=\"table mt-5\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">#</th>\r\n                            <th scope=\"col\">Patient Name</th>\r\n                            <th scope=\"col\">Notification Time</th>\r\n                            <th scope=\"col\">Status</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.state.tableEntries}\r\n                    </tbody>\r\n                </table>\r\n            </div>)\r\n    }\r\n}\r\n\r\nexport default Home;","import React, { Component } from 'react';\r\nimport {\r\n    Link\r\n} from \"react-router-dom\";\r\n\r\nimport './Login.css';\r\n\r\nclass Login extends Component {\r\n\r\n    constructor(state) {\r\n        super(state);\r\n        this.username = \"\";\r\n        this.password = \"\";\r\n        this.login = this.login.bind(this);\r\n    }\r\n\r\n    login(e) {\r\n        e.preventDefault();\r\n        console.log(\"login clicked\")\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"welocmePage\">\r\n                <div className=\"row login-row\">\r\n                    <div className=\"col-sm-7\">\r\n                        <h2>Emergency Detection System</h2>\r\n                        <h5>Home care staff monitoring console</h5>\r\n                    </div>\r\n                    <div className=\"col-sm-5\">\r\n                        <form onSubmit={this.login}>\r\n                            <div className=\"form-group\">\r\n                                <label>Email address</label>\r\n                                <input type=\"email\" className=\"form-control\" id=\"exampleInputEmail1\" aria-describedby=\"emailHelp\" placeholder=\"Enter email\" />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label>Password</label>\r\n                                <input type=\"password\" className=\"form-control\" id=\"exampleInputPassword1\" placeholder=\"Password\" />\r\n                            </div>\r\n                            <button type=\"submit\" className=\"btn btn-primary\">Login</button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Login;","import React, { Component } from 'react';\r\nimport {\r\n    Link\r\n} from \"react-router-dom\";\r\n\r\nimport './Login.css';\r\n\r\nclass Patients extends Component {\r\n\r\n    constructor(state) {\r\n        super(state);\r\n    }\r\n\r\n    render() {\r\n        return (<h1>Patients!</h1>)\r\n    }\r\n}\r\n\r\nexport default Patients;","import React, {Component} from 'react';\r\n\r\nimport './EmergencyDetails.css';\r\n\r\nclass EmergencyDetails extends Component {\r\n\r\n    constructor(state) {\r\n        super(state);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Details</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default EmergencyDetails;","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nimport Login from \"./Login\"\nimport Home from \"./Home\"\nimport Patients from \"./Patients\"\nimport EmergencyDetails from \"./EmergencyDetails\"\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router>\n\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary margin-b30\">\n        <Link className=\"nav-link navbar-brand\" to=\"/\">Red Whistle</Link>\n\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n          <ul className=\"navbar-nav mr-auto\">\n            <li className=\"nav-item\">\n              <Link className=\"nav-link\" to=\"/\">Home <span className=\"sr-only\">(current)</span></Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link className=\"nav-link\" to=\"/\">Patients <span className=\"sr-only\">(current)</span></Link>\n            </li>\n          </ul>\n        </div>\n      </nav>\n\n      <div className=\"container\">\n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <Switch>\n          <Route path=\"/patients\">\n            <Patients />\n          </Route>\n          <Route path=\"/emergencyDetails/:id\">\n            <EmergencyDetails />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}